steps:
- task: UseDotNet@2
  displayName: 'Use .NET Core sdk'
  inputs:
    packageType: sdk
    version: 2.x
    installationPath: $(Agent.ToolsDirectory)/dotnet

- script: dotnet restore Owlvey.Falcon.sln --configfile nuget/NuGet.Config
  displayName: Restore Dependencies

- script: dotnet build Owlvey.Falcon.sln -c Release
  displayName: Build Projects

- script: |
    dotnet test tests/Owlvey.Falcon.UnitTests/Owlvey.Falcon.UnitTests.csproj -c Release --no-build --no-restore  /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura --logger trx;logfilename=result.xml
    dotnet "tools/ReportGenerator/ReportGenerator.dll" "-reports:tests/Owlvey.Falcon.UnitTests/coverage.cobertura.xml" "-targetdir:tests/Owlvey.Falcon.UnitTests/coverage" "-reporttypes:HTMLInline"
  displayName: Run Unit Tests

- task: PublishCodeCoverageResults@1
  displayName: Unit Tests - Publish Code Coverage
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/tests/Owlvey.Falcon.UnitTests/coverage.cobertura.xml'
    reportDirectory: '$(System.DefaultWorkingDirectory)/tests/Owlvey.Falcon.UnitTests/coverage'

- task: PublishTestResults@2
  displayName: Unit Tests - Publish Test Results
  inputs:
    testRunner: VSTest
    testResultsFiles: 'tests/Owlvey.Falcon.UnitTests/TestResults/*.trx'
    testRunTitle: 'Falcon - UnitTests'

- script: dotnet test tests/Owlvey.Falcon.ComponentsTests/Owlvey.Falcon.ComponentsTests.csproj -c Release --no-restore /p:CollectCoverage=true /p:CoverletOutputFormat=opencover --logger trx;logfilename=result.xml
  displayName: Run Component Tests

- script: dotnet test tests/Owlvey.Falcon.IntegrationTests/Owlvey.Falcon.IntegrationTests.csproj -c Release --no-restore /p:CollectCoverage=true /p:CoverletOutputFormat=opencover --logger trx;logfilename=result.xml
  displayName: Run Integration Tests

- script: dotnet publish src/Owlvey.Falcon.API -c Release --no-restore -o ../../artifactory
  displayName: Package Application

- script: |
    cd src/Owlvey.Falcon.Components
    dotnet ef migrations script -c FalconDbContext -o ../../artifactory/falcondb.sql --verbose
    cd  ../../
  displayName: Get Migration Scripts

- task: Docker@2
  displayName: buildAndPush
  inputs:
    containerRegistry: 'Owlvey Docker Connection'
    repository: owlvey/api
    Dockerfile: artifactory/Dockerfile
    buildContext: artifactory
    tags: |
     $(Build.BuildId)
     latest